name: "Deploy to AWS"
description: "Deploys the application to AWS using Terraform"
on:
  push:
    branches:
      - main
    paths:
      - "deploy/iac/tf-aws/**"
  workflow_dispatch: {}
permissions:
  pull-requests: write
jobs:
  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    steps:
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: "Checkout Code"
        uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform fmt
        id: fmt
        working-directory: deploy/iac/tf-aws
        run: terraform fmt -check
      - name: "Terraform Init"
        working-directory: deploy/iac/tf-aws
        run: terraform init -backend-config="bucket=${{ secrets.AWS_BUCKET_NAME }}" -backend-config="key=${{ secrets.AWS_BUCKET_FILE }}"
      - name: Terraform validate
        id: validate
        working-directory: deploy/iac/tf-aws
        run: terraform validate
      - name: Terraform Apply
        id: apply
        working-directory: deploy/iac/tf-aws
        run: terraform apply -auto-approve
    # - name: Terraform Plan
    #   id: plan
    #   working-directory: deploy/iac/tf-aws
    #   run: terraform plan -no-color -input=false
    #   continue-on-error: true
    # - uses: actions/github-script@v7
    #   if: github.event_name == 'pull_request'
    #   env:
    #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       // 1. Retrieve existing bot comments for the PR
    #       const { data: comments } = await github.rest.issues.listComments({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         issue_number: context.issue.number,
    #       })
    #       const botComment = comments.find(comment => {
    #         return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
    #       })
    #
    #       // 2. Prepare format of the comment
    #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
    #       <details><summary>Validation Output</summary>
    #
    #       \`\`\`
    #       ${{ steps.validate.outputs.stdout }}
    #       \`\`\`
    #
    #       </details>
    #
    #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    #
    #       <details><summary>Show Plan</summary>
    #
    #       \`\`\`
    #       ${process.env.PLAN}
    #       \`\`\`
    #
    #       </details>
    #
    #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
    #
    #       // 3. If we have a comment, update it, otherwise create a new one
    #       if (botComment) {
    #         github.rest.issues.updateComment({
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           comment_id: botComment.id,
    #           body: output
    #         })
    #       } else {
    #         github.rest.issues.createComment({
    #           issue_number: context.issue.number,
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           body: output
    #         })
    #       }
