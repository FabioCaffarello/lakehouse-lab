name: CI Main
on:
  workflow_call:
    secrets: {}
    inputs:
      settings-file:
        description: 'Path to the settings file'
        required: false
        type: string
        default: '.github/ci-settings.yml'
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
      timeout:
        required: false
        type: number
        default: 60
      install-commands:
        description: 'Commands to install additional dependencies'
        required: false
        type: string
        default: ""
      final-commands:
        description: 'Commands to run after setup (e.g., make lint or make test)'
        required: false
        type: string
        default: ""
      use-coverage:
        description: "Whether to use coverage or not"
        required: false
        type: boolean
        default: false
env:
  # If a pull request, NX_BRANCH will be the PR number, otherwise the current ref name
  NX_BRANCH: ${{ github.event.number || github.ref_name }}
  NX_CLOUD_DISTRIBUTED_EXECUTION: false
jobs:
  main:
    runs-on: ${{ inputs.runs-on }}
    name: Run
    timeout-minutes: ${{ inputs.timeout }}
    defaults:
      run:
        working-directory: ${{ github.workspace }}
        shell: bash
    steps:
      # ---------------------------------------------------
      # 1) CHECKOUT CODE
      # ---------------------------------------------------
      - uses: actions/checkout@v4
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - uses: actions/checkout@v4
        name: Checkout [Default Branch]
        if: ${{ github.event_name != 'pull_request' }}
        with:
          fetch-depth: 0
      # ---------------------------------------------------
      # 2) PARSE SETTINGS FROM YAML FILE
      # ---------------------------------------------------
      - name: Parse additional settings
        id: settings-parser
        uses: christian-ci/action-yaml-github-output@v2
        with:
          file_path: './${{ inputs.settings-file }}'
      # ---------------------------------------------------
      # 3) SET SHAs FOR Nx "affected" COMMANDS
      #    - exports $NX_BASE_SHA / $NX_HEAD_SHA
      # ---------------------------------------------------
      - name: Derive SHAs for Nx
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: ${{ steps.settings-parser.outputs.main-branch-name }}
      # ---------------------------------------------------
      # 4) DETECT (OR HARD-CODE) PACKAGE MANAGER
      #    (Here we hard-code to npm)
      # ---------------------------------------------------
      - name: Detect package manager
        id: package_manager
        run: echo "name=npm" >> "$GITHUB_OUTPUT"
      # ---------------------------------------------------
      # 5) SETUP NODE (Via Volta)
      #    - Node version from your ci-settings.yml
      # ---------------------------------------------------
      - uses: volta-cli/action@v4
        name: Setup Node
        with:
          node-version: "${{ steps.settings-parser.outputs.node-version }}"
          package-json-path: "${{ github.workspace }}/package.json"
      # ---------------------------------------------------
      # 6) SETUP GO
      #    - Go version from your ci-settings.yml
      # ---------------------------------------------------
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ steps.settings-parser.outputs.go-version }}
      # ---------------------------------------------------
      # 7) SET UP PYTHON
      # ---------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.settings-parser.outputs.python-version }}
      # ---------------------------------------------------
      # 8) PRINT Node/Go/Python Versions
      #    (Useful debugging info)
      # ---------------------------------------------------
      - name: Print runtime versions
        id: versions
        run: |
          echo "Node: $(node --version)"
          echo "NPM: $(npm --version)"
          echo "Go: $(go version)"
          echo "Python: $(python --version)"

          # Output just the Node.js version number without the 'v' for caching keys
          node_ver=$(node --version)
          node_ver_clean=${node_ver#v}  # remove leading 'v'
          echo "node_version=$node_ver_clean" >> $GITHUB_OUTPUT
      # ---------------------------------------------------
      # 9) PROCESS environment-variables
      #    - Writes them into the GITHUB_ENV file
      # ---------------------------------------------------
      - name: Process environment variables
        if: ${{ inputs.environment-variables != '' }}
        uses: actions/github-script@v7
        env:
          ENV_VARS: ${{ inputs.environment-variables }}
        with:
          script: |
            const { appendFileSync } = require('fs');

            // trim spaces and escape quotes
            const cleanStr = str => str.trim().replaceAll(/`/g, "`");

            // parse variable to correct type if possible
            const parseStr = str =>
              str === 'true' || str === 'TRUE'
                ? true
                : str === 'false' || str === 'FALSE'
                  ? false
                  : isNaN(str)
                    ? str
                    : parseFloat(str);

            const varsStr = process.env.ENV_VARS || '';
            const vars = varsStr
              .split('\n')
              .map(variable => variable.trim())
              .filter(variable => variable.includes('='))
              .map(variable => ({
                name: cleanStr(variable.split('=')[0]),
                value: cleanStr(variable.slice(variable.indexOf('=') + 1))
              }));

            for (const v of vars) {
              console.log(`Appending environment variable "${v.name}" with value "${v.value}" to ${process.env.GITHUB_ENV}`);
              appendFileSync(process.env.GITHUB_ENV, `${v.name}=${parseStr(v.value)}\n`);
            }
      # ---------------------------------------------------
      # 10) RUN ANY USER-DEFINED INSTALL COMMANDS (OPTIONAL)
      # ---------------------------------------------------
      - name: Run custom install commands
        if: ${{ inputs.install-commands != '' }}
        run: ${{ inputs.install-commands }}
      # ---------------------------------------------------
      # 11) CACHE NODE_MODULES & INSTALL
      #    - Keyed on OS + package-lock.json
      # ---------------------------------------------------
      - name: Cache node_modules if using npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-
      - name: Install dependencies
        if: ${{ inputs.install-commands == '' }}
        run: npm ci --legacy-peer-deps
      # ---------------------------------------------------
      # 12) INSTALL POETRY & CACHE
      #     - Poetry version from your ci-settings.yml
      # ---------------------------------------------------
      - name: Install Poetry
        uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: ${{ steps.settings-parser.outputs.poetry-version }}
      - name: Cache Poetry Virtual Environment
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-
      - name: Install Python Dependencies (Poetry)
        run: |
          poetry config virtualenvs.in-project true
          poetry install --with dev --no-interaction --no-ansi
      # ---------------------------------------------------
      # 13) CACHE Nx's .nx/cache
      #    - Greatly speeds up repeated builds/tests
      # ---------------------------------------------------
      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nxcache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nxcache-
      # ---------------------------------------------------
      # 14) RUN FINAL COMMANDS
      # ---------------------------------------------------
      - name: Run any configured final-commands sequentially
        if: ${{ inputs.final-commands != '' }}
        run: |
          source .venv/bin/activate
          ${{ inputs.final-commands }}
      # ---------------------------------------------------
      # 15) UPLOAD HTML COVERAGE ARTIFACT
      # ---------------------------------------------------
      - name: Upload Coverage HTML Report
        if: ${{ github.event_name == 'pull_request' && inputs.use-coverage == true }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov
      # ---------------------------------------------------
      # 16) POST COVERAGE REPORT AS PR COMMENT
      # ---------------------------------------------------
      - name: Post Coverage Report as Master Comment
        if: ${{ github.event_name == 'pull_request' && inputs.use-coverage == true }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            // Read the entire coverage report from cov-report.txt
            const reportText = fs.readFileSync('cov-report.txt', 'utf8');

            // Extract the summary table: from the first occurrence of "Name" until "Coverage HTML written"
            let startIndex = reportText.indexOf("Name");
            let endIndex = reportText.indexOf("Coverage HTML written");
            let tableText = "";
            if (startIndex !== -1 && endIndex !== -1) {
              tableText = reportText.substring(startIndex, endIndex).trim();
            } else {
              tableText = reportText;
            }

            // Find the line that starts with 'TOTAL' to extract overall coverage
            const totalLine = reportText.split('\n').find(line => line.trim().startsWith("TOTAL"));
            let overallCoverage = "N/A";
            if (totalLine) {
              // Split by whitespace and take the last element as the coverage percentage
              const parts = totalLine.trim().split(/\s+/);
              overallCoverage = parts[parts.length - 1];
            }

            // Construct the master comment with a summary and a collapsible section for details
            const commentBody = `
            **Master Coverage Report**

            Our code's overall test coverage stands at **${overallCoverage}**.

            <details>
              <summary>View Coverage Summary Table</summary>

            \`\`\`
            ${tableText}
            \`\`\`
            </details>
                  `;

            // Post the comment on the PR
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
