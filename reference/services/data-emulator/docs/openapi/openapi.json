{"swagger":"2.0","info":{"title":"Emulator Service REST API","description":"API for the Emulator Service.","version":"1.0.0"},"host":"localhost:8000","basePath":"/","schemes":["http"],"paths":{"/emulator/":{"post":{"tags":["Emulator"],"summary":"Start a new emulation","parameters":[{"in":"body","name":"body","required":true,"schema":{"type":"object","required":["emulator_sync","format_type","sync_type","max_chunk_size","emulation_domain","timeout"],"properties":{"emulator_sync":{"type":"string"},"format_type":{"type":"string"},"sync_type":{"type":"string"},"max_chunk_size":{"type":"integer"},"emulation_domain":{"type":"string"},"timeout":{"type":"integer"}}}}],"responses":{"201":{"description":"Emulation scheduled successfully","schema":{"$ref":"#/definitions/EmulationScheduledDTO"}},"400":{"description":"Bad Request","schema":{"type":"object","properties":{"detail":{"type":"string"}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'http://localhost:8000/emulator/',\n  body: {\n    emulator_sync: 'string',\n    format_type: 'string',\n    sync_type: 'string',\n    max_chunk_size: 0,\n    emulation_domain: 'string',\n    timeout: 0\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url http://localhost:8000/emulator/ \\\n  --data '{\"emulator_sync\":\"string\",\"format_type\":\"string\",\"sync_type\":\"string\",\"max_chunk_size\":0,\"emulation_domain\":\"string\",\"timeout\":0}'"},{"lang":"Shell + Httpie","source":"echo '{\"emulator_sync\":\"string\",\"format_type\":\"string\",\"sync_type\":\"string\",\"max_chunk_size\":0,\"emulation_domain\":\"string\",\"timeout\":0}' |  \\\n  http POST http://localhost:8000/emulator/"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8000\")\n\npayload = \"{\\\"emulator_sync\\\":\\\"string\\\",\\\"format_type\\\":\\\"string\\\",\\\"sync_type\\\":\\\"string\\\",\\\"max_chunk_size\\\":0,\\\"emulation_domain\\\":\\\"string\\\",\\\"timeout\\\":0}\"\n\nconn.request(\"POST\", \"/emulator/\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_PORT => \"8000\",\n  CURLOPT_URL => \"http://localhost:8000/emulator/\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"emulator_sync\\\":\\\"string\\\",\\\"format_type\\\":\\\"string\\\",\\\"sync_type\\\":\\\"string\\\",\\\"max_chunk_size\\\":0,\\\"emulation_domain\\\":\\\"string\\\",\\\"timeout\\\":0}\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://localhost:8000/emulator/');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"emulator_sync\":\"string\",\"format_type\":\"string\",\"sync_type\":\"string\",\"max_chunk_size\":0,\"emulation_domain\":\"string\",\"timeout\":0}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"emulator_sync\":\"string\",\"format_type\":\"string\",\"sync_type\":\"string\",\"max_chunk_size\":0,\"emulation_domain\":\"string\",\"timeout\":0}');\n\n$request->setRequestUrl('http://localhost:8000/emulator/');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"}]}},"/emulator/{emulation_id}/status":{"get":{"tags":["Emulator"],"summary":"Get the status of an emulation","parameters":[{"name":"emulation_id","in":"path","required":true,"type":"string","description":"ID of the emulation"}],"responses":{"200":{"description":"Successfully retrieved emulation status","schema":{"$ref":"#/definitions/EmulationStatusDTO"}},"404":{"description":"Emulation not found","schema":{"type":"object","properties":{"detail":{"type":"string"}}}},"500":{"description":"Internal server error","schema":{"type":"object","properties":{"detail":{"type":"string"}}}}},"x-codeSamples":[{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {method: 'GET', url: 'http://localhost:8000/emulator/%7Bemulation_id%7D/status'};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url http://localhost:8000/emulator/%7Bemulation_id%7D/status"},{"lang":"Shell + Httpie","source":"http GET http://localhost:8000/emulator/%7Bemulation_id%7D/status"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPConnection(\"localhost:8000\")\n\nconn.request(\"GET\", \"/emulator/%7Bemulation_id%7D/status\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_PORT => \"8000\",\n  CURLOPT_URL => \"http://localhost:8000/emulator/%7Bemulation_id%7D/status\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://localhost:8000/emulator/%7Bemulation_id%7D/status');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('http://localhost:8000/emulator/%7Bemulation_id%7D/status');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"}]}}},"definitions":{"StartEmulatorDTO":{"type":"object","required":["emulator_sync","format_type","sync_type","max_chunk_size","emulation_domain","timeout"],"properties":{"emulator_sync":{"type":"string"},"format_type":{"type":"string"},"sync_type":{"type":"string"},"max_chunk_size":{"type":"integer"},"emulation_domain":{"type":"string"},"timeout":{"type":"integer"}}},"EmulationScheduledDTO":{"type":"object","required":["id","emulator_sync","format_type","sync_type","emulation_domain","max_chunk_size","timeout"],"properties":{"id":{"type":"string"},"emulator_sync":{"type":"string"},"format_type":{"type":"string"},"sync_type":{"type":"string"},"emulation_domain":{"type":"string"},"max_chunk_size":{"type":"integer"},"timeout":{"type":"integer"}}},"EmulationStatusDTO":{"type":"object","required":["id","status"],"properties":{"id":{"type":"string"},"status":{"$ref":"#/definitions/StatusDTO"}}},"StatusDTO":{"type":"object","required":["global_status","threads"],"properties":{"global_status":{"type":"string"},"threads":{"type":"object","additionalProperties":{"type":"string"}}}}}}
