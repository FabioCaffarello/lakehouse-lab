x-kafka-controller-base: &kafka-controller-base
  image: apache/kafka:3.8.1
  restart: on-failure
  command:
    - /bin/sh
    - -c
    - |
      echo '
      log4j.rootLogger=INFO, stdout, kafkaAppender
      log4j.appender.stdout=org.apache.log4j.ConsoleAppender
      log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
      log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n
      log4j.appender.kafkaAppender=org.apache.log4j.RollingFileAppender
      log4j.appender.kafkaAppender.File=/opt/kafka/logs/kafka.log
      log4j.appender.kafkaAppender.MaxFileSize=10MB
      log4j.appender.kafkaAppender.MaxBackupIndex=10
      log4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout
      log4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n
      ' > /tmp/log4j.properties
      /etc/kafka/docker/run
  volumes:
    - ./.volumes/jmx_exporter:/usr/share/jmx_exporter/
  networks:
    - lakehouse-lab-network
  healthcheck:
    test: ["CMD", "nc", "-z", "localhost", "9093"]
    interval: 20s
    timeout: 5s
    retries: 3
x-kafka-controller-env: &kafka-controller-env
  KAFKA_PROCESS_ROLES: controller
  KAFKA_LISTENERS: CONTROLLER://:9093
  KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
  KAFKA_CLUSTER_ID: 5L6g3nShT-eMCtK--X86sw
  KAFKA_LOG4J_OPTS: -Dlog4j.configuration=file:/tmp/log4j.properties
services:
  kafka-controller-1:
    !!merge <<: *kafka-controller-base
    container_name: kafka-controller-1
    hostname: kafka-controller-1
    environment:
      !!merge <<: *kafka-controller-env
      KAFKA_NODE_ID: 1
      KAFKA_LOG4J_OPTS: -Dlog4j.configuration=file:/tmp/log4j.properties
      KAFKA_OPTS: "-javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.0.1.jar=9300:/usr/share/jmx_exporter/kafka-broker.yml"
    volumes:
      - ./.volumes/kafka/controler_data_1:/var/lib/kafka/data
      - ./.volumes/kafka/logs/controler-logs_1:/opt/kafka/logs
      - ./.volumes/jmx_exporter:/usr/share/jmx_exporter/
  kafka-controller-2:
    !!merge <<: *kafka-controller-base
    container_name: kafka-controller-2
    environment:
      !!merge <<: *kafka-controller-env
      KAFKA_NODE_ID: 2
      KAFKA_LOG4J_OPTS: -Dlog4j.configuration=file:/tmp/log4j.properties
      KAFKA_OPTS: "-javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.0.1.jar=9300:/usr/share/jmx_exporter/kafka-broker.yml"
    volumes:
      - ./.volumes/kafka/controller_data_2:/var/lib/kafka/data
      - ./.volumes/kafka/logs/controller-logs_2:/opt/kafka/logs
      - ./.volumes/jmx_exporter:/usr/share/jmx_exporter/
  kafka-controller-3:
    !!merge <<: *kafka-controller-base
    container_name: kafka-controller-3
    environment:
      !!merge <<: *kafka-controller-env
      KAFKA_NODE_ID: 3
      KAFKA_LOG4J_OPTS: -Dlog4j.configuration=file:/tmp/log4j.properties
      KAFKA_OPTS: "-javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.0.1.jar=9300:/usr/share/jmx_exporter/kafka-broker.yml"
    volumes:
      - ./.volumes/kafka/controller_data_3:/var/lib/kafka/data
      - ./.volumes/kafka/logs/controller-logs_3:/opt/kafka/logs
      - ./.volumes/jmx_exporter:/usr/share/jmx_exporter/
  kafka-broker-1:
    image: apache/kafka:3.8.1
    restart: on-failure
    container_name: kafka-broker-1
    ports:
      - "29092:9092"
    command:
      - /bin/sh
      - -c
      - |
        echo '
        log4j.rootLogger=INFO, stdout, kafkaAppender
        log4j.appender.stdout=org.apache.log4j.ConsoleAppender
        log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
        log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n
        log4j.appender.kafkaAppender=org.apache.log4j.RollingFileAppender
        log4j.appender.kafkaAppender.File=/opt/kafka/logs/kafka.log
        log4j.appender.kafkaAppender.MaxFileSize=10MB
        log4j.appender.kafkaAppender.MaxBackupIndex=10
        log4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout
        log4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n
        ' > /tmp/log4j.properties
        /etc/kafka/docker/run
    environment:
      KAFKA_NODE_ID: 4
      KAFKA_PROCESS_ROLES: broker
      KAFKA_CLUSTER_ID: 5L6g3nShT-eMCtK--X86sw
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-broker-1:19092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
      KAFKA_LOG4J_OPTS: -Dlog4j.configuration=file:/tmp/log4j.properties
      KAFKA_OPTS: "-javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.0.1.jar=9300:/usr/share/jmx_exporter/kafka-broker.yml"
    volumes:
      - ./.volumes/kafka/broker_data_1:/var/lib/kafka/data
      - ./.volumes/kafka/logs/broker-logs_1:/opt/kafka/logs
      - ./.volumes/jmx_exporter:/usr/share/jmx_exporter/
    depends_on:
      kafka-controller-1:
        condition: service_healthy
      kafka-controller-2:
        condition: service_healthy
      kafka-controller-3:
        condition: service_healthy
    networks:
      - lakehouse-lab-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 20s
      timeout: 5s
      retries: 3
  kafka-broker-2:
    image: apache/kafka:3.8.1
    restart: on-failure
    container_name: kafka-broker-2
    ports:
      - "39092:9092"
    command:
      - /bin/sh
      - -c
      - |
        echo '
        log4j.rootLogger=INFO, stdout, kafkaAppender
        log4j.appender.stdout=org.apache.log4j.ConsoleAppender
        log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
        log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n
        log4j.appender.kafkaAppender=org.apache.log4j.RollingFileAppender
        log4j.appender.kafkaAppender.File=/opt/kafka/logs/kafka.log
        log4j.appender.kafkaAppender.MaxFileSize=10MB
        log4j.appender.kafkaAppender.MaxBackupIndex=10
        log4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout
        log4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n
        ' > /tmp/log4j.properties
        /etc/kafka/docker/run
    environment:
      KAFKA_NODE_ID: 5
      KAFKA_PROCESS_ROLES: broker
      KAFKA_CLUSTER_ID: 5L6g3nShT-eMCtK--X86sw
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-broker-2:19092,PLAINTEXT_HOST://localhost:39092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
      KAFKA_LOG4J_OPTS: -Dlog4j.configuration=file:/tmp/log4j.properties
      KAFKA_OPTS: "-javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.0.1.jar=9300:/usr/share/jmx_exporter/kafka-broker.yml"
    volumes:
      - ./.volumes/kafka/broker_data_2:/var/lib/kafka/data
      - ./.volumes/kafka/logs/broker-logs_2:/opt/kafka/logs
      - ./.volumes/jmx_exporter:/usr/share/jmx_exporter/
    depends_on:
      kafka-controller-1:
        condition: service_healthy
      kafka-controller-2:
        condition: service_healthy
      kafka-controller-3:
        condition: service_healthy
    networks:
      - lakehouse-lab-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 20s
      timeout: 5s
      retries: 3
  kafka-broker-3:
    image: apache/kafka:3.8.1
    restart: on-failure
    container_name: kafka-broker-3
    ports:
      - "49092:9092"
    command:
      - /bin/sh
      - -c
      - |
        echo '
        log4j.rootLogger=INFO, stdout, kafkaAppender
        log4j.appender.stdout=org.apache.log4j.ConsoleAppender
        log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
        log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n
        log4j.appender.kafkaAppender=org.apache.log4j.RollingFileAppender
        log4j.appender.kafkaAppender.File=/opt/kafka/logs/kafka.log
        log4j.appender.kafkaAppender.MaxFileSize=10MB
        log4j.appender.kafkaAppender.MaxBackupIndex=10
        log4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout
        log4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n
        ' > /tmp/log4j.properties
        /etc/kafka/docker/run
    environment:
      KAFKA_NODE_ID: 6
      KAFKA_PROCESS_ROLES: broker
      KAFKA_CLUSTER_ID: 5L6g3nShT-eMCtK--X86sw
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-broker-3:19092,PLAINTEXT_HOST://localhost:49092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
      KAFKA_LOG4J_OPTS: -Dlog4j.configuration=file:/tmp/log4j.properties
      KAFKA_OPTS: "-javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.0.1.jar=9300:/usr/share/jmx_exporter/kafka-broker.yml"
    volumes:
      - ./.volumes/kafka/broker_data_3:/var/lib/kafka/data
      - ./.volumes/kafka/logs/broker-logs_3:/opt/kafka/logs
      - ./.volumes/jmx_exporter:/usr/share/jmx_exporter/
    depends_on:
      kafka-controller-1:
        condition: service_healthy
      kafka-controller-2:
        condition: service_healthy
      kafka-controller-3:
        condition: service_healthy
    networks:
      - lakehouse-lab-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 20s
      timeout: 5s
      retries: 3
  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.0
    container_name: schema-registry
    ports:
      - "18081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-broker-1:19092,kafka-broker-2:19092,kafka-broker-3:19092
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:18081
      SCHEMA_REGISTRY_KAFKASTORE_TIMEOUT_MS: 50000
    depends_on:
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    networks:
      - lakehouse-lab-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:18081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 5
  console:
    image: docker.redpanda.com/redpandadata/console:v2.8.3
    container_name: console
    entrypoint: /bin/sh
    command: |-
      -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    ports:
      - "8080:8080"
    depends_on:
      schema-registry:
        condition: service_healthy
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: >
        kafka:
















          brokers: [kafka-broker-1:19092,kafka-broker-2:19092,kafka-broker-3:19092]
          schemaRegistry:
            enabled: true
            urls: ["http://schema-registry:18081"]
        redpanda:





          adminApi:
            enabled: false
            urls: ["http://kafka_broker:9644"]
        connect:





          enabled: false
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    networks:
      - lakehouse-lab-network
  prometheus:
    image: prom/prometheus:v3.0.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
    depends_on:
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    networks:
      - lakehouse-lab-network
  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: alertmanager
    ports:
      - "59093:9093"
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
    depends_on:
      - prometheus
    networks:
      - lakehouse-lab-network
  grafana:
    image: grafana/grafana:11.5.2
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION: "true"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_AUTH_DISABLE_SIGNOUT_MENU: "true"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - lakehouse-lab-network
  data-emulator:
    image: fabiocaffarello/data-emulator:latest
    container_name: data-emulator
    ports:
      - "8000:8000"
    depends_on:
      - console
    env_file:
      - .env
    networks:
      - lakehouse-lab-network
  minio:
    restart: always
    image: minio/minio
    platform: linux/amd64
    container_name: minio_s3
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001" --address ":9000"
    environment:
      MINIO_ROOT_USER: ${MINIO_USERNAME}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    volumes:
      - minio-data:/data
    networks:
      - lakehouse-lab-network
  mc:
    image: minio/mc
    platform: linux/amd64
    depends_on:
      - minio
    container_name: mc
    env_file:
      - .env
    entrypoint: >
      /bin/sh -c " /tmp/wait-for-it.sh minio:9000 && /usr/bin/mc alias set minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} && /usr/bin/mc mb minio/mlflow; exit 0; "

    volumes:
      - ./scripts/wait-for-it.sh:/tmp/wait-for-it.sh
    networks:
      - lakehouse-lab-network
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    platform: linux/aarch64
    ports:
      - 8082:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - lakehouse-lab-network
volumes:
  minio-data:
  grafana-data:
networks:
  lakehouse-lab-network:
    name: lakehouse-lab-network
    driver: bridge
