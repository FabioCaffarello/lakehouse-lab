x-kafka-controller-base: &kafka-controller-base
  image: apache/kafka:3.8.1
  restart: on-failure
  networks:
    - lakehouse-lab-slim-network
  healthcheck:
    test: ["CMD", "nc", "-z", "localhost", "9093"]
    interval: 20s
    timeout: 5s
    retries: 3
x-kafka-controller-env: &kafka-controller-env
  KAFKA_PROCESS_ROLES: controller
  KAFKA_LISTENERS: CONTROLLER://:9093
  KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093
  KAFKA_CLUSTER_ID: 5L6g3nShT-eMCtK--X86sw
x-airflow-common: &airflow-common
  image: fabiocaffarello/airflow-app:latest
  env_file:
    - ./airflow.env
  volumes:
    - ./services/airflow-app/airflow_app/jobs:/opt/airflow/jobs
    - ./services/airflow-app/airflow_app/dags:/opt/airflow/dags
    - ./services/airflow-app/airflow_app/logs:/opt/airflow/logs
    - ./services/airflow-app/airflow_app/plugins:/opt/airflow/plugins
  depends_on:
    - postgres
  networks:
    - lakehouse-lab-slim-network
x-spark-common: &spark-common
  build:
    context: ./deploy/docker/spark/
    dockerfile: Dockerfile
  volumes:
    - ./services/airflow-app/airflow_app/jobs:/opt/bitnami/spark/jobs
    - ./.artefacts/spark/local-cluster/mnt/spark-checkpoints:/tmp/spark-checkpoints
    - ./.artefacts/spark/local-cluster/mnt/spark-state:/tmp/spark-state
  networks:
    - lakehouse-lab-slim-network
services:
  kafka-controller-1:
    !!merge <<: *kafka-controller-base
    container_name: kafka-controller-1
    hostname: kafka-controller-1
    environment:
      !!merge <<: *kafka-controller-env
      KAFKA_NODE_ID: 1
    volumes:
      - ./.volumes/kafka/controler_data_1:/var/lib/kafka/data
  kafka-controller-2:
    !!merge <<: *kafka-controller-base
    container_name: kafka-controller-2
    environment:
      !!merge <<: *kafka-controller-env
      KAFKA_NODE_ID: 2
    volumes:
      - ./.volumes/kafka/controller_data_2:/var/lib/kafka/data
  kafka-broker-1:
    image: apache/kafka:3.8.1
    restart: on-failure
    container_name: kafka-broker-1
    ports:
      - "29092:9092"
    environment:
      KAFKA_NODE_ID: 4
      KAFKA_PROCESS_ROLES: broker
      KAFKA_CLUSTER_ID: 5L6g3nShT-eMCtK--X86sw
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-broker-1:19092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093
    volumes:
      - ./.volumes/kafka/broker_data_1:/var/lib/kafka/data
    depends_on:
      kafka-controller-1:
        condition: service_healthy
      kafka-controller-2:
        condition: service_healthy
    networks:
      - lakehouse-lab-slim-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 20s
      timeout: 5s
      retries: 3
  kafka-broker-2:
    image: apache/kafka:3.8.1
    restart: on-failure
    container_name: kafka-broker-2
    ports:
      - "39092:9092"
    environment:
      KAFKA_NODE_ID: 5
      KAFKA_PROCESS_ROLES: broker
      KAFKA_CLUSTER_ID: 5L6g3nShT-eMCtK--X86sw
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-broker-2:19092,PLAINTEXT_HOST://localhost:39092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-controller-1:9093,2@kafka-controller-2:9093
    volumes:
      - ./.volumes/kafka/broker_data_2:/var/lib/kafka/data
    depends_on:
      kafka-controller-1:
        condition: service_healthy
      kafka-controller-2:
        condition: service_healthy
    networks:
      - lakehouse-lab-slim-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 20s
      timeout: 5s
      retries: 3
  console:
    image: docker.redpanda.com/redpandadata/console:v2.8.3
    container_name: console
    entrypoint: /bin/sh
    command: |-
      -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    ports:
      - "8080:8080"
    depends_on:
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: >
        kafka:





          brokers: [kafka-broker-1:19092,kafka-broker-2:19092]
          schemaRegistry:
            enabled: false
            urls: ["http://schema-registry:18081"]
        redpanda:




            enabled: false
            urls: ["http://kafka_broker:9644"]
        connect:






          enabled: false
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    networks:
      - lakehouse-lab-slim-network
  data-emulator:
    image: fabiocaffarello/data-emulator:latest
    container_name: data-emulator
    ports:
      - "8000:8000"
    depends_on:
      - console
    env_file:
      - .env.slim
    networks:
      - lakehouse-lab-slim-network
  minio:
    restart: always
    image: minio/minio
    platform: linux/amd64
    container_name: minio_s3
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001" --address ":9000"
    environment:
      MINIO_ROOT_USER: ${MINIO_USERNAME}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    volumes:
      - minio-data:/data
    networks:
      - lakehouse-lab-slim-network
  mc:
    image: minio/mc
    platform: linux/amd64
    depends_on:
      - minio
    container_name: mc
    env_file:
      - .env.slim
    entrypoint: >
      /bin/sh -c " echo 'Waiting for MinIO to start...' && /bin/sleep 10 && mc alias set minio http://minio:9000 $$AWS_ACCESS_KEY_ID $$AWS_SECRET_ACCESS_KEY && mc mb minio/silver && echo 'Buckets created.'"

    volumes:
      - ./scripts/wait-for-it.sh:/tmp/wait-for-it.sh
    networks:
      - lakehouse-lab-slim-network
  nessie:
    image: projectnessie/nessie:latest
    container_name: nessie
    networks:
      - lakehouse-lab-slim-network
    ports:
      - 19120:19120
  dremio:
    image: dremio/dremio-oss
    container_name: dremio
    ports:
      - 9047:9047
      - 31010:31010
      - 32010:32010
      - 45678:45678
    environment:
      - DREMIO_JAVA_SERVER_EXTRA_OPTS=-Dpaths.dist=file:///opt/dremio/data/dist
    depends_on:
      - mc
    networks:
      - lakehouse-lab-slim-network
  superset:
    image: alexmerced/dremio-superset
    container_name: superset
    networks:
      - lakehouse-lab-slim-network
    ports:
      - 8088:8088
  postgres:
    image: postgres:14.0
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - lakehouse-lab-slim-network
  webserver:
    !!merge <<: *airflow-common
    container_name: webserver
    command: webserver
    ports:
      - "8085:8080"
    depends_on:
      - scheduler
  scheduler:
    !!merge <<: *airflow-common
    container_name: scheduler
    depends_on:
      postgres:
        condition: service_healthy
    command: bash -c "airflow db migrate && airflow users create --username admin --firstname Fabio --lastname Caffarello --role Admin --email fabio.caffarello@gmail.com --password admin && airflow scheduler"
  spark-master:
    !!merge <<: *spark-common
    container_name: spark-master
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "9095:8080"
      - "7077:7077"
  spark-worker-1: &spark-worker
    !!merge <<: *spark-common
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    container_name: spark-worker-1
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 1
      SPARK_WORKER_MEMORY: 1g
      SPARK_MASTER_URL: spark://spark-master:7077
  spark-worker-2:
    !!merge <<: *spark-worker
    container_name: spark-worker-2
volumes:
  minio-data:
networks:
  lakehouse-lab-slim-network:
    name: lakehouse-lab-slim-network
    driver: bridge
